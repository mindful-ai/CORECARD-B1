seq = a b c a a a b c a b c a b 
pat = a b c a b

        i
a b c a a
a b c a b
        j
seq[i] = pat[j]   
i++
j++

i
b c a a a
a b c a b
j

c a a a b
a b c a b
        
seq = a a a a a a a a b c a a a b c a b c a b 
pat = a a a a b

-------------------------------------------------------------------------

Observation KMP algorithm considers:

abcdabc

prefix: a, ab, abc, abcd
suffix: c, bc, abc, dabc

abc appears in both prefixes and suffixes

1 2 3 4 5 6 7 8 9
a b c a a b d a b c  - pattern
0 0 0 1 1 2 0 1 2 3  - pi table (pre-processing stage of the algorithm)

Refer: https://medium.com/@aakashjsr/preprocessing-algorithm-for-kmp-search-lps-array-algorithm-50e35b5bb3cb


Exercise:

compute the LPS table for the following pattern:

1 2 3 4 5 6 7 8 9 10 11 12 13 14
a b c d a a b c a b  a  b  c  d
0 0 0 0 1 1 2 3 1 2  1  2  3  4

------------------------------------------------------------------------------

a a a b c a a b c

a a b c
0 1 0 0

*
a a a b c a a b c
a a b c

  *
a a a b c a a b c Match
  a a b c

    *
a a a b c a a b c
    a a b c

      *
a a a b c a a b c
      a a b c

        *
a a a b c a a b c
        a a b c

          *
a a a b c a a b c Match
          a a b c


----------------------------------------------------------------------------

Speciality:

i doesn't move backwards, it only keeps moving forward
j resets to a point according to the LPS table from where comparisons should be made
